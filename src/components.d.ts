/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface OtHospitalApp {
        "apiBase": string;
        "basePath": string;
        "hospitalId": string;
    }
    interface OtHospitalEditor {
        "apiBase": string;
        "entryId": string;
        "hospitalId": string;
    }
    interface OtHospitalList {
        "apiBase": string;
        "hospitalId": string;
        "reload": () => Promise<void>;
    }
    interface OtHospitalNavbar {
        "apiBase": string;
        "basePath": string;
        "hospitalId": string;
    }
}
export interface OtHospitalEditorCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLOtHospitalEditorElement;
}
export interface OtHospitalListCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLOtHospitalListElement;
}
declare global {
    interface HTMLOtHospitalAppElement extends Components.OtHospitalApp, HTMLStencilElement {
    }
    var HTMLOtHospitalAppElement: {
        prototype: HTMLOtHospitalAppElement;
        new (): HTMLOtHospitalAppElement;
    };
    interface HTMLOtHospitalEditorElementEventMap {
        "editor-closed": string;
    }
    interface HTMLOtHospitalEditorElement extends Components.OtHospitalEditor, HTMLStencilElement {
        addEventListener<K extends keyof HTMLOtHospitalEditorElementEventMap>(type: K, listener: (this: HTMLOtHospitalEditorElement, ev: OtHospitalEditorCustomEvent<HTMLOtHospitalEditorElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLOtHospitalEditorElementEventMap>(type: K, listener: (this: HTMLOtHospitalEditorElement, ev: OtHospitalEditorCustomEvent<HTMLOtHospitalEditorElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLOtHospitalEditorElement: {
        prototype: HTMLOtHospitalEditorElement;
        new (): HTMLOtHospitalEditorElement;
    };
    interface HTMLOtHospitalListElementEventMap {
        "entry-clicked": string;
    }
    interface HTMLOtHospitalListElement extends Components.OtHospitalList, HTMLStencilElement {
        addEventListener<K extends keyof HTMLOtHospitalListElementEventMap>(type: K, listener: (this: HTMLOtHospitalListElement, ev: OtHospitalListCustomEvent<HTMLOtHospitalListElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLOtHospitalListElementEventMap>(type: K, listener: (this: HTMLOtHospitalListElement, ev: OtHospitalListCustomEvent<HTMLOtHospitalListElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLOtHospitalListElement: {
        prototype: HTMLOtHospitalListElement;
        new (): HTMLOtHospitalListElement;
    };
    interface HTMLOtHospitalNavbarElement extends Components.OtHospitalNavbar, HTMLStencilElement {
    }
    var HTMLOtHospitalNavbarElement: {
        prototype: HTMLOtHospitalNavbarElement;
        new (): HTMLOtHospitalNavbarElement;
    };
    interface HTMLElementTagNameMap {
        "ot-hospital-app": HTMLOtHospitalAppElement;
        "ot-hospital-editor": HTMLOtHospitalEditorElement;
        "ot-hospital-list": HTMLOtHospitalListElement;
        "ot-hospital-navbar": HTMLOtHospitalNavbarElement;
    }
}
declare namespace LocalJSX {
    interface OtHospitalApp {
        "apiBase"?: string;
        "basePath"?: string;
        "hospitalId"?: string;
    }
    interface OtHospitalEditor {
        "apiBase"?: string;
        "entryId"?: string;
        "hospitalId"?: string;
        "onEditor-closed"?: (event: OtHospitalEditorCustomEvent<string>) => void;
    }
    interface OtHospitalList {
        "apiBase"?: string;
        "hospitalId": string;
        "onEntry-clicked"?: (event: OtHospitalListCustomEvent<string>) => void;
    }
    interface OtHospitalNavbar {
        "apiBase": string;
        "basePath"?: string;
        "hospitalId": string;
    }
    interface IntrinsicElements {
        "ot-hospital-app": OtHospitalApp;
        "ot-hospital-editor": OtHospitalEditor;
        "ot-hospital-list": OtHospitalList;
        "ot-hospital-navbar": OtHospitalNavbar;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "ot-hospital-app": LocalJSX.OtHospitalApp & JSXBase.HTMLAttributes<HTMLOtHospitalAppElement>;
            "ot-hospital-editor": LocalJSX.OtHospitalEditor & JSXBase.HTMLAttributes<HTMLOtHospitalEditorElement>;
            "ot-hospital-list": LocalJSX.OtHospitalList & JSXBase.HTMLAttributes<HTMLOtHospitalListElement>;
            "ot-hospital-navbar": LocalJSX.OtHospitalNavbar & JSXBase.HTMLAttributes<HTMLOtHospitalNavbarElement>;
        }
    }
}
