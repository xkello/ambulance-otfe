/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface XHospitalApp {
        "apiBase": string;
        "basePath": string;
        "hospitalId": string;
    }
    interface XHospitalEditor {
        "apiBase": string;
        "entryId": string;
        "hospitalId": string;
    }
    interface XHospitalList {
        "apiBase": string;
        "hospitalId": string;
        "reload": () => Promise<void>;
    }
    interface XHospitalNavbar {
        "apiBase": string;
        "basePath": string;
        "hospitalId": string;
    }
}
export interface XHospitalEditorCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLXHospitalEditorElement;
}
export interface XHospitalListCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLXHospitalListElement;
}
declare global {
    interface HTMLXHospitalAppElement extends Components.XHospitalApp, HTMLStencilElement {
    }
    var HTMLXHospitalAppElement: {
        prototype: HTMLXHospitalAppElement;
        new (): HTMLXHospitalAppElement;
    };
    interface HTMLXHospitalEditorElementEventMap {
        "editor-closed": string;
    }
    interface HTMLXHospitalEditorElement extends Components.XHospitalEditor, HTMLStencilElement {
        addEventListener<K extends keyof HTMLXHospitalEditorElementEventMap>(type: K, listener: (this: HTMLXHospitalEditorElement, ev: XHospitalEditorCustomEvent<HTMLXHospitalEditorElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLXHospitalEditorElementEventMap>(type: K, listener: (this: HTMLXHospitalEditorElement, ev: XHospitalEditorCustomEvent<HTMLXHospitalEditorElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLXHospitalEditorElement: {
        prototype: HTMLXHospitalEditorElement;
        new (): HTMLXHospitalEditorElement;
    };
    interface HTMLXHospitalListElementEventMap {
        "entry-clicked": string;
    }
    interface HTMLXHospitalListElement extends Components.XHospitalList, HTMLStencilElement {
        addEventListener<K extends keyof HTMLXHospitalListElementEventMap>(type: K, listener: (this: HTMLXHospitalListElement, ev: XHospitalListCustomEvent<HTMLXHospitalListElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLXHospitalListElementEventMap>(type: K, listener: (this: HTMLXHospitalListElement, ev: XHospitalListCustomEvent<HTMLXHospitalListElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLXHospitalListElement: {
        prototype: HTMLXHospitalListElement;
        new (): HTMLXHospitalListElement;
    };
    interface HTMLXHospitalNavbarElement extends Components.XHospitalNavbar, HTMLStencilElement {
    }
    var HTMLXHospitalNavbarElement: {
        prototype: HTMLXHospitalNavbarElement;
        new (): HTMLXHospitalNavbarElement;
    };
    interface HTMLElementTagNameMap {
        "x-hospital-app": HTMLXHospitalAppElement;
        "x-hospital-editor": HTMLXHospitalEditorElement;
        "x-hospital-list": HTMLXHospitalListElement;
        "x-hospital-navbar": HTMLXHospitalNavbarElement;
    }
}
declare namespace LocalJSX {
    interface XHospitalApp {
        "apiBase"?: string;
        "basePath"?: string;
        "hospitalId"?: string;
    }
    interface XHospitalEditor {
        "apiBase"?: string;
        "entryId"?: string;
        "hospitalId"?: string;
        "onEditor-closed"?: (event: XHospitalEditorCustomEvent<string>) => void;
    }
    interface XHospitalList {
        "apiBase"?: string;
        "hospitalId": string;
        "onEntry-clicked"?: (event: XHospitalListCustomEvent<string>) => void;
    }
    interface XHospitalNavbar {
        "apiBase": string;
        "basePath"?: string;
        "hospitalId": string;
    }
    interface IntrinsicElements {
        "x-hospital-app": XHospitalApp;
        "x-hospital-editor": XHospitalEditor;
        "x-hospital-list": XHospitalList;
        "x-hospital-navbar": XHospitalNavbar;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "x-hospital-app": LocalJSX.XHospitalApp & JSXBase.HTMLAttributes<HTMLXHospitalAppElement>;
            "x-hospital-editor": LocalJSX.XHospitalEditor & JSXBase.HTMLAttributes<HTMLXHospitalEditorElement>;
            "x-hospital-list": LocalJSX.XHospitalList & JSXBase.HTMLAttributes<HTMLXHospitalListElement>;
            "x-hospital-navbar": LocalJSX.XHospitalNavbar & JSXBase.HTMLAttributes<HTMLXHospitalNavbarElement>;
        }
    }
}
