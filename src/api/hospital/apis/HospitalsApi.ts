/* tslint:disable */
/* eslint-disable */
/**
 * Employee List Api
 * Hospital Employee Administration for Web-In-Cloud system
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: xkello@stuba.sk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Hospital,
} from '../models';
import {
    HospitalFromJSON,
    HospitalToJSON,
} from '../models';

export interface CreateHospitalRequest {
    hospital: Hospital;
}

export interface DeleteHospitalRequest {
    hospitalId: string;
}

/**
 * HospitalsApi - interface
 *
 * @export
 * @interface HospitalsApiInterface
 */
export interface HospitalsApiInterface {
    /**
     * Use this method to initialize new hospital in the system
     * @summary Saves new hospital definition
     * @param {Hospital} hospital Hospital details to store
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HospitalsApiInterface
     */
    createHospitalRaw(requestParameters: CreateHospitalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Hospital>>;

    /**
     * Use this method to initialize new hospital in the system
     * Saves new hospital definition
     */
    createHospital(requestParameters: CreateHospitalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Hospital>;

    /**
     * Use this method to delete the specific hospital from the system.
     * @summary Deletes specific hospital
     * @param {string} hospitalId pass the id of the particular hospital
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HospitalsApiInterface
     */
    deleteHospitalRaw(requestParameters: DeleteHospitalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Use this method to delete the specific hospital from the system.
     * Deletes specific hospital
     */
    deleteHospital(requestParameters: DeleteHospitalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     *
     * @summary Provides the hospital list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HospitalsApiInterface
     */
    getHospitalRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Hospital>>>;

    /**
     * Provides the hospital list
     */
    getHospital(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Hospital>>;

}

/**
 *
 */
export class HospitalsApi extends runtime.BaseAPI implements HospitalsApiInterface {

    /**
     * Use this method to initialize new hospital in the system
     * Saves new hospital definition
     */
    async createHospitalRaw(requestParameters: CreateHospitalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Hospital>> {
        if (requestParameters.hospital === null || requestParameters.hospital === undefined) {
            throw new runtime.RequiredError('hospital','Required parameter requestParameters.hospital was null or undefined when calling createHospital.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/hospital`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: HospitalToJSON(requestParameters.hospital),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HospitalFromJSON(jsonValue));
    }

    /**
     * Use this method to initialize new hospital in the system
     * Saves new hospital definition
     */
    async createHospital(requestParameters: CreateHospitalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Hospital> {
        const response = await this.createHospitalRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this method to delete the specific hospital from the system.
     * Deletes specific hospital
     */
    async deleteHospitalRaw(requestParameters: DeleteHospitalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.hospitalId === null || requestParameters.hospitalId === undefined) {
            throw new runtime.RequiredError('hospitalId','Required parameter requestParameters.hospitalId was null or undefined when calling deleteHospital.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/hospital/{hospitalId}`.replace(`{${"hospitalId"}}`, encodeURIComponent(String(requestParameters.hospitalId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Use this method to delete the specific hospital from the system.
     * Deletes specific hospital
     */
    async deleteHospital(requestParameters: DeleteHospitalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteHospitalRaw(requestParameters, initOverrides);
    }

    /**
     * Provides the hospital list
     */
    async getHospitalRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Hospital>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/hospital`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(HospitalFromJSON));
    }

    /**
     * Provides the hospital list
     */
    async getHospital(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Hospital>> {
        const response = await this.getHospitalRaw(initOverrides);
        return await response.value();
    }

}
