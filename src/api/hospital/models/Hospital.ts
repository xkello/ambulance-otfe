/* tslint:disable */
/* eslint-disable */
/**
 * Employee List Api
 * Hospital Employee Administration for Web-In-Cloud system
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: xbelake@stuba.sk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { EmployeeListEntry } from './EmployeeListEntry';
import {
    EmployeeListEntryFromJSON,
    EmployeeListEntryFromJSONTyped,
    EmployeeListEntryToJSON,
} from './EmployeeListEntry';
import type { Role } from './Role';
import {
    RoleFromJSON,
    RoleFromJSONTyped,
    RoleToJSON,
} from './Role';

/**
 * 
 * @export
 * @interface Hospital
 */
export interface Hospital {
    /**
     * Unique identifier of the hospital
     * @type {string}
     * @memberof Hospital
     */
    id: string;
    /**
     * Human readable display name of the hospital
     * @type {string}
     * @memberof Hospital
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Hospital
     */
    address?: string;
    /**
     * 
     * @type {Array<EmployeeListEntry>}
     * @memberof Hospital
     */
    employeeList?: Array<EmployeeListEntry>;
    /**
     * 
     * @type {Array<Role>}
     * @memberof Hospital
     */
    predefinedRoles?: Array<Role>;
}

/**
 * Check if a given object implements the Hospital interface.
 */
export function instanceOfHospital(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "name" in value;

    return isInstance;
}

export function HospitalFromJSON(json: any): Hospital {
    return HospitalFromJSONTyped(json, false);
}

export function HospitalFromJSONTyped(json: any, ignoreDiscriminator: boolean): Hospital {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'address': !exists(json, 'address') ? undefined : json['address'],
        'employeeList': !exists(json, 'employeeList') ? undefined : ((json['employeeList'] as Array<any>).map(EmployeeListEntryFromJSON)),
        'predefinedRoles': !exists(json, 'predefinedRoles') ? undefined : ((json['predefinedRoles'] as Array<any>).map(RoleFromJSON)),
    };
}

export function HospitalToJSON(value?: Hospital | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'address': value.address,
        'employeeList': value.employeeList === undefined ? undefined : ((value.employeeList as Array<any>).map(EmployeeListEntryToJSON)),
        'predefinedRoles': value.predefinedRoles === undefined ? undefined : ((value.predefinedRoles as Array<any>).map(RoleToJSON)),
    };
}

