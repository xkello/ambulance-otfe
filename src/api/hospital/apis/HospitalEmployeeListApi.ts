/* tslint:disable */
/* eslint-disable */
/**
 * Employee List Api
 * Hospital Employee Administration for Web-In-Cloud system
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: xkello@stuba.sk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  EmployeeListEntry,
  TransferEmployeeListEntryRequest,
} from '../models';
import {
    EmployeeListEntryFromJSON,
    EmployeeListEntryToJSON,
    TransferEmployeeListEntryRequestFromJSON,
    TransferEmployeeListEntryRequestToJSON,
} from '../models';

export interface CreateEmployeeListEntryRequest {
    hospitalId: string;
    employeeListEntry: EmployeeListEntry;
}

export interface DeleteEmployeeListEntryRequest {
    hospitalId: string;
    entryId: string;
}

export interface GetEmployeeListEntriesRequest {
    hospitalId: string;
}

export interface GetEmployeeListEntryRequest {
    hospitalId: string;
    entryId: string;
}

export interface TransferEmployeeListEntryOperationRequest {
    hospitalId: string;
    entryId: string;
    transferEmployeeListEntryRequest: TransferEmployeeListEntryRequest;
}

export interface UpdateEmployeeListEntryRequest {
    hospitalId: string;
    entryId: string;
    employeeListEntry: EmployeeListEntry;
}

/**
 * HospitalEmployeeListApi - interface
 *
 * @export
 * @interface HospitalEmployeeListApiInterface
 */
export interface HospitalEmployeeListApiInterface {
    /**
     * Use this method to store new entry into the employee list.
     * @summary Saves new entry into employee list
     * @param {string} hospitalId pass the id of the particular hospital
     * @param {EmployeeListEntry} employeeListEntry Employee list entry to store
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HospitalEmployeeListApiInterface
     */
    createEmployeeListEntryRaw(requestParameters: CreateEmployeeListEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmployeeListEntry>>;

    /**
     * Use this method to store new entry into the employee list.
     * Saves new entry into employee list
     */
    createEmployeeListEntry(requestParameters: CreateEmployeeListEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmployeeListEntry>;

    /**
     * Use this method to delete the specific entry from the employee list.
     * @summary Deletes specific entry
     * @param {string} hospitalId pass the id of the particular hospital
     * @param {string} entryId pass the id of the particular entry in the employee list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HospitalEmployeeListApiInterface
     */
    deleteEmployeeListEntryRaw(requestParameters: DeleteEmployeeListEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Use this method to delete the specific entry from the employee list.
     * Deletes specific entry
     */
    deleteEmployeeListEntry(requestParameters: DeleteEmployeeListEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * By using hospitalId you get list of entries in hospital employee list
     * @summary Provides the hospital employee list
     * @param {string} hospitalId pass the id of the particular hospital
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HospitalEmployeeListApiInterface
     */
    getEmployeeListEntriesRaw(requestParameters: GetEmployeeListEntriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<EmployeeListEntry>>>;

    /**
     * By using hospitalId you get list of entries in hospital employee list
     * Provides the hospital employee list
     */
    getEmployeeListEntries(requestParameters: GetEmployeeListEntriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<EmployeeListEntry>>;

    /**
     * By using hospitalId and entryId you can details of particular entry item hospital.
     * @summary Provides details about employee list entry
     * @param {string} hospitalId pass the id of the particular hospital
     * @param {string} entryId pass the id of the particular entry in the employee list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HospitalEmployeeListApiInterface
     */
    getEmployeeListEntryRaw(requestParameters: GetEmployeeListEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmployeeListEntry>>;

    /**
     * By using hospitalId and entryId you can details of particular entry item hospital.
     * Provides details about employee list entry
     */
    getEmployeeListEntry(requestParameters: GetEmployeeListEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmployeeListEntry>;

    /**
     * Moves the given entry from the source hospital to the one specified in the request body.
     * @summary Transfer an employee entry to another hospital
     * @param {string} hospitalId The ID of the source hospital
     * @param {string} entryId The ID of the employee entry to move
     * @param {TransferEmployeeListEntryRequest} transferEmployeeListEntryRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HospitalEmployeeListApiInterface
     */
    transferEmployeeListEntryRaw(requestParameters: TransferEmployeeListEntryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<EmployeeListEntry>>>;

    /**
     * Moves the given entry from the source hospital to the one specified in the request body.
     * Transfer an employee entry to another hospital
     */
    transferEmployeeListEntry(requestParameters: TransferEmployeeListEntryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<EmployeeListEntry>>;

    /**
     * Use this method to update content of the employee list entry.
     * @summary Updates specific entry
     * @param {string} hospitalId pass the id of the particular hospital
     * @param {string} entryId pass the id of the particular entry in the employee list
     * @param {EmployeeListEntry} employeeListEntry Waiting list entry to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HospitalEmployeeListApiInterface
     */
    updateEmployeeListEntryRaw(requestParameters: UpdateEmployeeListEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmployeeListEntry>>;

    /**
     * Use this method to update content of the employee list entry.
     * Updates specific entry
     */
    updateEmployeeListEntry(requestParameters: UpdateEmployeeListEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmployeeListEntry>;

}

/**
 *
 */
export class HospitalEmployeeListApi extends runtime.BaseAPI implements HospitalEmployeeListApiInterface {

    /**
     * Use this method to store new entry into the employee list.
     * Saves new entry into employee list
     */
    async createEmployeeListEntryRaw(requestParameters: CreateEmployeeListEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmployeeListEntry>> {
        if (requestParameters.hospitalId === null || requestParameters.hospitalId === undefined) {
            throw new runtime.RequiredError('hospitalId','Required parameter requestParameters.hospitalId was null or undefined when calling createEmployeeListEntry.');
        }

        if (requestParameters.employeeListEntry === null || requestParameters.employeeListEntry === undefined) {
            throw new runtime.RequiredError('employeeListEntry','Required parameter requestParameters.employeeListEntry was null or undefined when calling createEmployeeListEntry.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/employee-list/{hospitalId}/entries`.replace(`{${"hospitalId"}}`, encodeURIComponent(String(requestParameters.hospitalId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmployeeListEntryToJSON(requestParameters.employeeListEntry),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmployeeListEntryFromJSON(jsonValue));
    }

    /**
     * Use this method to store new entry into the employee list.
     * Saves new entry into employee list
     */
    async createEmployeeListEntry(requestParameters: CreateEmployeeListEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmployeeListEntry> {
        const response = await this.createEmployeeListEntryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this method to delete the specific entry from the employee list.
     * Deletes specific entry
     */
    async deleteEmployeeListEntryRaw(requestParameters: DeleteEmployeeListEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.hospitalId === null || requestParameters.hospitalId === undefined) {
            throw new runtime.RequiredError('hospitalId','Required parameter requestParameters.hospitalId was null or undefined when calling deleteEmployeeListEntry.');
        }

        if (requestParameters.entryId === null || requestParameters.entryId === undefined) {
            throw new runtime.RequiredError('entryId','Required parameter requestParameters.entryId was null or undefined when calling deleteEmployeeListEntry.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/employee-list/{hospitalId}/entries/{entryId}`.replace(`{${"hospitalId"}}`, encodeURIComponent(String(requestParameters.hospitalId))).replace(`{${"entryId"}}`, encodeURIComponent(String(requestParameters.entryId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Use this method to delete the specific entry from the employee list.
     * Deletes specific entry
     */
    async deleteEmployeeListEntry(requestParameters: DeleteEmployeeListEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteEmployeeListEntryRaw(requestParameters, initOverrides);
    }

    /**
     * By using hospitalId you get list of entries in hospital employee list
     * Provides the hospital employee list
     */
    async getEmployeeListEntriesRaw(requestParameters: GetEmployeeListEntriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<EmployeeListEntry>>> {
        if (requestParameters.hospitalId === null || requestParameters.hospitalId === undefined) {
            throw new runtime.RequiredError('hospitalId','Required parameter requestParameters.hospitalId was null or undefined when calling getEmployeeListEntries.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/employee-list/{hospitalId}/entries`.replace(`{${"hospitalId"}}`, encodeURIComponent(String(requestParameters.hospitalId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EmployeeListEntryFromJSON));
    }

    /**
     * By using hospitalId you get list of entries in hospital employee list
     * Provides the hospital employee list
     */
    async getEmployeeListEntries(requestParameters: GetEmployeeListEntriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<EmployeeListEntry>> {
        const response = await this.getEmployeeListEntriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * By using hospitalId and entryId you can details of particular entry item hospital.
     * Provides details about employee list entry
     */
    async getEmployeeListEntryRaw(requestParameters: GetEmployeeListEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmployeeListEntry>> {
        if (requestParameters.hospitalId === null || requestParameters.hospitalId === undefined) {
            throw new runtime.RequiredError('hospitalId','Required parameter requestParameters.hospitalId was null or undefined when calling getEmployeeListEntry.');
        }

        if (requestParameters.entryId === null || requestParameters.entryId === undefined) {
            throw new runtime.RequiredError('entryId','Required parameter requestParameters.entryId was null or undefined when calling getEmployeeListEntry.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/employee-list/{hospitalId}/entries/{entryId}`.replace(`{${"hospitalId"}}`, encodeURIComponent(String(requestParameters.hospitalId))).replace(`{${"entryId"}}`, encodeURIComponent(String(requestParameters.entryId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmployeeListEntryFromJSON(jsonValue));
    }

    /**
     * By using hospitalId and entryId you can details of particular entry item hospital.
     * Provides details about employee list entry
     */
    async getEmployeeListEntry(requestParameters: GetEmployeeListEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmployeeListEntry> {
        const response = await this.getEmployeeListEntryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Moves the given entry from the source hospital to the one specified in the request body.
     * Transfer an employee entry to another hospital
     */
    async transferEmployeeListEntryRaw(requestParameters: TransferEmployeeListEntryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<EmployeeListEntry>>> {
        if (requestParameters.hospitalId === null || requestParameters.hospitalId === undefined) {
            throw new runtime.RequiredError('hospitalId','Required parameter requestParameters.hospitalId was null or undefined when calling transferEmployeeListEntry.');
        }

        if (requestParameters.entryId === null || requestParameters.entryId === undefined) {
            throw new runtime.RequiredError('entryId','Required parameter requestParameters.entryId was null or undefined when calling transferEmployeeListEntry.');
        }

        if (requestParameters.transferEmployeeListEntryRequest === null || requestParameters.transferEmployeeListEntryRequest === undefined) {
            throw new runtime.RequiredError('transferEmployeeListEntryRequest','Required parameter requestParameters.transferEmployeeListEntryRequest was null or undefined when calling transferEmployeeListEntry.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/employee-list/{hospitalId}/entries/{entryId}/transfer`.replace(`{${"hospitalId"}}`, encodeURIComponent(String(requestParameters.hospitalId))).replace(`{${"entryId"}}`, encodeURIComponent(String(requestParameters.entryId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransferEmployeeListEntryRequestToJSON(requestParameters.transferEmployeeListEntryRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EmployeeListEntryFromJSON));
    }

    /**
     * Moves the given entry from the source hospital to the one specified in the request body.
     * Transfer an employee entry to another hospital
     */
    async transferEmployeeListEntry(requestParameters: TransferEmployeeListEntryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<EmployeeListEntry>> {
        const response = await this.transferEmployeeListEntryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this method to update content of the employee list entry.
     * Updates specific entry
     */
    async updateEmployeeListEntryRaw(requestParameters: UpdateEmployeeListEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmployeeListEntry>> {
        if (requestParameters.hospitalId === null || requestParameters.hospitalId === undefined) {
            throw new runtime.RequiredError('hospitalId','Required parameter requestParameters.hospitalId was null or undefined when calling updateEmployeeListEntry.');
        }

        if (requestParameters.entryId === null || requestParameters.entryId === undefined) {
            throw new runtime.RequiredError('entryId','Required parameter requestParameters.entryId was null or undefined when calling updateEmployeeListEntry.');
        }

        if (requestParameters.employeeListEntry === null || requestParameters.employeeListEntry === undefined) {
            throw new runtime.RequiredError('employeeListEntry','Required parameter requestParameters.employeeListEntry was null or undefined when calling updateEmployeeListEntry.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/employee-list/{hospitalId}/entries/{entryId}`.replace(`{${"hospitalId"}}`, encodeURIComponent(String(requestParameters.hospitalId))).replace(`{${"entryId"}}`, encodeURIComponent(String(requestParameters.entryId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EmployeeListEntryToJSON(requestParameters.employeeListEntry),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmployeeListEntryFromJSON(jsonValue));
    }

    /**
     * Use this method to update content of the employee list entry.
     * Updates specific entry
     */
    async updateEmployeeListEntry(requestParameters: UpdateEmployeeListEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmployeeListEntry> {
        const response = await this.updateEmployeeListEntryRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
